name: Build, Test, and Release Automation

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and Extract Tesseract Portable
        run: |
          curl -L -o tesseract.zip "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
          7z x tesseract.zip -oTesseractOCR

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Run PyInstaller
        run: pyinstaller --name "Automation" --onefile --windowed --add-data "isim_label.png;." automation.py

      - name: Prepare Release Folder
        run: |
          mkdir release_package
          mkdir release_package/tesseract
          Copy-Item -Path "TesseractOCR/*" -Destination "release_package/tesseract" -Recurse
          Copy-Item -Path "dist/Automation.exe" -Destination "release_package/"
          Copy-Item -Path "isim_label.png" -Destination "release_package/"

      - name: Get Version Number
        id: version
        run: echo "tag=v1.0.${{ github.run_number }}" >> $env:GITHUB_OUTPUT

      - name: Zip Release Folder
        run: Compress-Archive -Path release_package/* -DestinationPath "InsaatAsistani-${{ steps.version.outputs.tag }}.zip"

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-package
          path: "InsaatAsistani-${{ steps.version.outputs.tag }}.zip"

  test:
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release-package

      - name: Unzip Release Package
        run: Expand-Archive -Path "InsaatAsistani-${{ needs.build.outputs.version }}.zip" -DestinationPath test_run

      - name: Install and start virtual display
        run: |
          choco install tightvnc -y
          Start-Process "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run"
          Start-Sleep -Seconds 5

      - name: Run Integration Test
        shell: pwsh
        run: |
          # 1. Adım: Ana uygulamayı GÖRÜNÜR olarak başlat.
          echo "Starting target application..."
          Start-Process python -ArgumentList "app.py" -WindowStyle Normal
          Start-Sleep -Seconds 7

          # 2. Adım: Tüm test mantığını bir PowerShell script dosyasına yaz.
          @"
          echo "Running Automation.exe in a minimized window..."
          
          # NİHAİ DÜZELTME: Automation.exe'ye kendi klasörünü çalışma dizini olarak veriyoruz.
          # Bu, dosyaların doğru yere kaydedilmesini garantiler.
          \$process = Start-Process -FilePath "./test_run/Automation.exe" -WorkingDirectory "./test_run" -PassThru -Wait -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt"
          
          \$stdout = Get-Content stdout.txt -Raw -ErrorAction SilentlyContinue
          \$stderr = Get-Content stderr.txt -Raw -ErrorAction SilentlyContinue
          \$output = \$stdout + \$stderr
          
          echo "--- AUTOMATION OUTPUT ---"
          echo \$output
          echo "--------------------------------"
          
          \$expected_text = "Automation completed successfully!"
          if (\$output -like "*\$expected_text*") {
            echo "✅ TEST PASSED"
            exit 0
          } else {
            echo "❌ TEST FAILED"
            exit 1
          }
          "@ | Set-Content -Path test_logic.ps1 -Encoding utf8

          # 3. Adım: Oluşturulan test script'ini KÜÇÜLTÜLMÜŞ olarak çalıştır.
          echo "Executing test logic in the background..."
          $process = $null
          try {
              $process = Start-Process powershell -ArgumentList "-File", "test_logic.ps1" -WorkingDirectory $env:GITHUB_WORKSPACE -WindowStyle Minimized -Wait -PassThru -ErrorAction Stop
          } catch {
              Write-Error "Failed to execute test_logic.ps1. Error: $_"
              exit 1
          }
          
          # 4. Adım: Test script'inin çıkış kodunu kontrol et.
          if ($null -ne $process -and $process.ExitCode -ne 0) {
              Write-Host "❌ Test script failed with exit code: $($process.ExitCode)"
              if (Test-Path test_run/stdout.txt) { # Dosya yolu düzeltildi
                Write-Host "--- Captured output from failed test ---"
                Get-Content test_run/stdout.txt # Dosya yolu düzeltildi
                Write-Host "----------------------------------------"
              }
              exit 1
          } elseif ($null -eq $process) {
              Write-Error "❌ The test process object was not created. Test failed."
              exit 1
          } else {
              echo "✅ Test script completed successfully."
          }

      - name: Upload Full Screen Debug Screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-debug-screenshot
          path: test_run/full-screenshot.png

      - name: Upload OCR Debug Screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ocr-debug-screenshot
          path: test_run/ocr-screenshot.png

      - name: Upload Label Not Found Screenshot on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-screenshot-label-not-found
          path: test_run/error_screenshot_label_not_found.png
          
      - name: Upload Debug Screenshot on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-screenshots
          path: debug-screenshot.png