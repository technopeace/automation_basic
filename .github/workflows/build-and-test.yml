name: Build, Test, and Release Automation

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and Extract Tesseract Portable
        run: |
          curl -L -o tesseract.zip "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
          7z x tesseract.zip -oTesseractOCR

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Build PyAutoGUI Automation Executable
        run: pyinstaller --name "Automation" --onefile --windowed --add-data "isim_label.png;." automation.py

      - name: Prepare Release Folder
        run: |
          mkdir release_package
          mkdir release_package/tesseract
          Copy-Item -Path "TesseractOCR/*" -Destination "release_package/tesseract" -Recurse
          Copy-Item -Path "dist/Automation.exe" -Destination "release_package/"
          Copy-Item -Path "isim_label.png" -Destination "release_package/"

      - name: Get Version Number
        id: version
        run: echo "tag=v1.0.${{ github.run_number }}" >> $env:GITHUB_OUTPUT

      - name: Zip Release Folder
        run: Compress-Archive -Path release_package/* -DestinationPath "ConstructionAssistant-${{ steps.version.outputs.tag }}.zip"

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-package
          path: "ConstructionAssistant-${{ steps.version.outputs.tag }}.zip"

      # ‚úÖ Yeni eklenen adƒ±m: EXE artifact ayrƒ±ca y√ºklensin
      - name: Upload EXE Artifact (for WinAppDriver)
        uses: actions/upload-artifact@v4
        with:
          name: Automation-exe
          path: dist/Automation.exe

  test_pyautogui:
    name: Test with PyAutoGUI
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release-package

      - name: Unzip Release Package
        run: Expand-Archive -Path "ConstructionAssistant-${{ needs.build.outputs.version }}.zip" -DestinationPath test_run

      - name: Install and start virtual display
        run: |
          choco install tightvnc -y
          Start-Process "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run"
          Start-Sleep -Seconds 5

      - name: Run PyAutoGUI Integration Test
        shell: pwsh
        run: |
          echo "Starting target Tkinter application..."
          Start-Process python -ArgumentList "app.py" -WindowStyle Maximized
          Start-Sleep -Seconds 7
          echo "Running PyAutoGUI automation..."
          Start-Process -FilePath "./test_run/Automation.exe" -PassThru -Wait -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt"
          $output = (Get-Content stdout.txt -Raw -ErrorAction SilentlyContinue) + (Get-Content stderr.txt -Raw -ErrorAction SilentlyContinue)
          echo "--- PyAutoGUI AUTOMATION OUTPUT ---"; echo $output; echo "-----------------------------------"
          $expected_text = "Saved! Name: Baris Kahraman Age: 28"
          if ($output -like "*$expected_text*") { echo "‚úÖ PyAutoGUI TEST PASSED" }
          else { echo "‚ùå PyAutoGUI TEST FAILED"; exit 1 }

      - name: Upload PyAutoGUI Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pyautogui-screenshots
          path: |
            test_run/full-screenshot.png
            test_run/ocr-screenshot.png

  test_selenium:
    name: Test with Selenium
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python dependencies
        run: pip install -r requirements_web.txt

      - name: Install Node.js dependencies
        run: npm install

      - name: Run Selenium Integration Test
        shell: pwsh
        run: |
          # Start the Flask server in the background
          echo "Starting Flask web server in the background..."
          $flaskProcess = Start-Process python -ArgumentList "app_web.py" -PassThru
          
          # Wait for Flask server to be ready
          echo "Waiting for Flask server to respond..."
          $timeoutSeconds = 30
          $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
          $serverReady = $false
          
          while ($stopwatch.Elapsed.TotalSeconds -lt $timeoutSeconds) {
              try {
                  $response = Invoke-WebRequest -Uri "http://127.0.0.1:5000" -UseBasicParsing -TimeoutSec 2 -ErrorAction Stop
                  if ($response.StatusCode -eq 200) {
                      echo "‚úÖ Flask server is up and running."
                      $serverReady = $true
                      break
                  }
              } catch { }
              Start-Sleep -Seconds 1
          }
          
          if (-not $serverReady) {
              echo "‚ùå ERROR: Flask server did not start within $timeoutSeconds seconds."
              Stop-Process -Id $flaskProcess.Id -Force
              exit 1
          }

          try {
            $electronPath = Join-Path $env:GITHUB_WORKSPACE 'node_modules\electron\dist\electron.exe'
            $appEntry = Join-Path $env:GITHUB_WORKSPACE 'app_web.js'

            Write-Host "Electron binary: $electronPath"
            Write-Host "App entry file: $appEntry"

            $arguments = "automation_selenium.py", $electronPath, $appEntry
            Start-Process python -ArgumentList $arguments -PassThru -Wait -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt"

            $output = (Get-Content stdout.txt -Raw -ErrorAction SilentlyContinue) + (Get-Content stderr.txt -Raw -ErrorAction SilentlyContinue)

            echo "--- SELENIUM AUTOMATION OUTPUT ---"
            echo $output
            echo "----------------------------------"

            # Take full-screen screenshot
            Add-Type -AssemblyName System.Windows.Forms
            Add-Type -AssemblyName System.Drawing
            $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
            $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
            $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
            $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
            $bitmap.Save("full-screenshot.png")
            echo "Full-screen screenshot saved as full-screenshot.png"

            $expected_text = "‚úÖ SELENIUM TEST PASSED"
            if ($output -like "*$expected_text*") {
              echo "‚úÖ SELENIUM TEST SUITE PASSED"
            } else {
              echo "‚ùå SELENIUM TEST SUITE FAILED"
              exit 1
            }
          } finally {
            echo "Stopping Flask web server..."
            Stop-Process -Id $flaskProcess.Id -Force
          }

      - name: Upload Selenium Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selenium-screenshots
          path: |
            selenium-failure-screenshot.png
            full-screenshot.png

  test_winappdriver:
    name: Test with WinAppDriver
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python dependencies for WinAppDriver
        run: pip install -r requirements_winappdriver.txt
      - name: Install and Start WinAppDriver
        run: |
          echo "Downloading and installing WinAppDriver..."
          curl -L -o WinAppDriver.msi "https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver.msi"
          msiexec /i WinAppDriver.msi /quiet
          echo "Starting WinAppDriver server in the background..."
          Start-Process "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe"
          Start-Sleep -Seconds 5
      - name: Run WinAppDriver Integration Test
        shell: pwsh
        run: |
          # THE FIX: Create a launcher for the REAL application (app.py)
          Set-Content -Path "launch.bat" -Value "python app.py"
          $launcherPath = Join-Path $env:GITHUB_WORKSPACE 'launch.bat'
          echo "Running WinAppDriver automation script against launcher: $launcherPath"
          
          # Pass the launcher path to the automation script
          $arguments = "automation_winappdriver.py", $launcherPath
          Start-Process python -ArgumentList $arguments -PassThru -Wait -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt"
          
          $output = (Get-Content stdout.txt -Raw -ErrorAction SilentlyContinue) + (Get-Content stderr.txt -Raw -ErrorAction SilentlyContinue)
          echo "--- WINAPPDRIVER AUTOMATION OUTPUT ---"; echo $output; echo "--------------------------------------"
          
          $expected_text = "üéâ WINAPPDRIVER TEST PASSED"
          if ($output -like "*$expected_text*") {
            echo "‚úÖ WINAPPDRIVER TEST SUITE PASSED"
          } else {
            echo "‚ùå WINAPPDRIVER TEST SUITE FAILED"
            exit 1
          }
