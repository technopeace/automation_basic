name: Build, Test, and Release Automation

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and Extract Tesseract Portable
        run: |
          curl -L -o tesseract.zip "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
          7z x tesseract.zip -oTesseractOCR

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Build PyAutoGUI Automation Executable
        run: pyinstaller --name "Automation" --onefile --windowed --add-data "isim_label.png;." automation.py

      - name: Prepare Release Folder
        run: |
          mkdir release_package
          mkdir release_package/tesseract
          Copy-Item -Path "TesseractOCR/*" -Destination "release_package/tesseract" -Recurse
          Copy-Item -Path "dist/Automation.exe" -Destination "release_package/"
          Copy-Item -Path "isim_label.png" -Destination "release_package/"

      - name: Get Version Number
        id: version
        run: echo "tag=v1.0.${{ github.run_number }}" >> $env:GITHUB_OUTPUT

      - name: Zip Release Folder
        run: Compress-Archive -Path release_package/* -DestinationPath "ConstructionAssistant-${{ steps.version.outputs.tag }}.zip"

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-package
          path: "ConstructionAssistant-${{ steps.version.outputs.tag }}.zip"

  test_pyautogui:
    name: Test with PyAutoGUI
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release-package

      - name: Unzip Release Package
        run: Expand-Archive -Path "ConstructionAssistant-${{ needs.build.outputs.version }}.zip" -DestinationPath test_run

      - name: Install and start virtual display
        run: |
          choco install tightvnc -y
          Start-Process "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run"
          Start-Sleep -Seconds 5

      - name: Run PyAutoGUI Integration Test
        shell: pwsh
        run: |
          echo "Starting target Tkinter application..."
          Start-Process python -ArgumentList "app.py" -WindowStyle Maximized
          Start-Sleep -Seconds 7
          echo "Running PyAutoGUI automation..."
          Start-Process -FilePath "./test_run/Automation.exe" -PassThru -Wait -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt"
          $output = (Get-Content stdout.txt -Raw -ErrorAction SilentlyContinue) + (Get-Content stderr.txt -Raw -ErrorAction SilentlyContinue)
          echo "--- PyAutoGUI AUTOMATION OUTPUT ---"; echo $output; echo "-----------------------------------"
          $expected_text = "Saved! Name: Baris Kahraman Age: 28"
          if ($output -like "*$expected_text*") { echo "✅ PyAutoGUI TEST PASSED" }
          else { echo "❌ PyAutoGUI TEST FAILED"; exit 1 }

      - name: Upload PyAutoGUI Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pyautogui-screenshots
          path: |
            test_run/full-screenshot.png
            test_run/ocr-screenshot.png
  test_selenium:
    name: Test with Selenium
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python dependencies for web test
        run: pip install -r requirements_web.txt
      
      - name: Install Node.js dependencies
        run: npm install

      - name: Build Electron App
        run: npm run dist
      
      - name: List Build Artifacts for Debugging
        run: ls -R dist
        shell: bash

      - name: Run Selenium Integration Test
        shell: pwsh
        run: |
          echo "Starting Flask web server in the background..."
          Start-Process python -ArgumentList "app_web.py"
          Start-Sleep -Seconds 5

          echo "Running Selenium automation script..."
          
          # --- THE FIX: Construct the ABSOLUTE path to the executable ---
          $exePath = Join-Path $env:GITHUB_WORKSPACE 'dist\construction-assistant-web.exe'
          Write-Host "Will launch Electron app from: $exePath"
          
          # Pass the absolute path as a command-line argument to the Python script
          $arguments = "automation_selenium.py", "'$exePath'"
          Start-Process python -ArgumentList $arguments -PassThru -Wait -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt"
          
          $output = (Get-Content stdout.txt -Raw -ErrorAction SilentlyContinue) + (Get-Content stderr.txt -Raw -ErrorAction SilentlyContinue)
          
          echo "--- SELENIUM AUTOMATION OUTPUT ---"
          echo $output
          echo "----------------------------------"

          $expected_text = "✅ SELENIUM TEST PASSED"
          if ($output -like "*$expected_text*") {
            echo "✅ SELENIUM TEST SUITE PASSED"
            exit 0
          } else {
            echo "❌ SELENIUM TEST SUITE FAILED"
            exit 1
          }

      - name: Upload Selenium Failure Screenshot
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: selenium-failure-screenshot
          path: selenium-failure-screenshot.png